datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum TripStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum VehicleType {
  SEDAN
  SUV
  VAN
}

enum VehicleStatus {
  AVAILABLE
  BUSY
  MAINTENANCE
  OFFLINE
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  password     String
  firstName    String
  lastName     String
  role         UserRole  @default(EMPLOYEE)
  gender       Gender
  department   String
  managerId    String?
  manager      User?     @relation("UserToManager", fields: [managerId], references: [id])
  subordinates User[]    @relation("UserToManager")
  driver       Driver?
  bookings     Booking[] @relation("UserBookings")
  approvals    Booking[] @relation("BookingApprovals")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastLoginAt  DateTime?

  @@index([email])
  @@index([managerId])
}

model Location {
  id                 String    @id @default(uuid())
  name               String
  latitude           Float
  longitude          Float
  address            String?
  distanceFromOffice Float
  timestamp          DateTime  @default(now())
  vehicle            Vehicle?  @relation(fields: [vehicleId], references: [id])
  vehicleId          String?
  pickups            Booking[] @relation("PickupLocation")
  drops              Booking[] @relation("DropLocation")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@map("locations")
}

model Booking {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation("UserBookings", fields: [userId], references: [id])
  pickupId        String
  pickup          Location      @relation("PickupLocation", fields: [pickupId], references: [id])
  dropId          String
  drop            Location      @relation("DropLocation", fields: [dropId], references: [id])
  scheduledTime   DateTime
  vehicleType     VehicleType   @default(SEDAN)
  passengerCount  Int           @default(1)
  notes           String?
  status          BookingStatus @default(PENDING)
  fare            Float
  approverId      String?
  approver        User?         @relation("BookingApprovals", fields: [approverId], references: [id])
  approvalComment String?
  trip            Trip?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([pickupId])
  @@index([dropId])
  @@index([approverId])
  @@index([status])
}

model FareRule {
  id             String   @id @default(uuid())
  baseFare       Float
  ratePerKm      Float
  peakMultiplier Float    @default(1.0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Driver {
  id            String    @id @default(uuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  licenseNumber String    @unique
  licenseExpiry DateTime
  isAvailable   Boolean   @default(true)
  vehicles      Vehicle[]
  trips         Trip[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        String    @default("AVAILABLE")

  @@index([licenseNumber])
}

model Vehicle {
  id           String        @id @default(uuid())
  model        String
  licensePlate String        @unique
  capacity     Int
  type         VehicleType
  status       VehicleStatus @default(OFFLINE)
  locations    Location[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Driver       Driver?       @relation(fields: [driverId], references: [id])
  driverId     String?
  Trip         Trip[]

  @@map("vehicles")
}

model Trip {
  id          String     @id @default(uuid())
  bookingId   String     @unique
  booking     Booking    @relation(fields: [bookingId], references: [id])
  vehicleId   String
  vehicle     Vehicle    @relation(fields: [vehicleId], references: [id])
  driverId    String
  driver      Driver     @relation(fields: [driverId], references: [id])
  status      TripStatus @default(SCHEDULED)
  startTime   DateTime?
  endTime     DateTime?
  currentLat  Float?
  currentLong Float?
  sos         SOS[]
  incidents   Incident[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([bookingId])
  @@index([vehicleId])
  @@index([driverId])
}

model SOS {
  id          String   @id @default(uuid())
  tripId      String
  trip        Trip     @relation(fields: [tripId], references: [id])
  latitude    Float
  longitude   Float
  description String
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tripId])
}

model Incident {
  id          String   @id @default(uuid())
  tripId      String
  trip        Trip     @relation(fields: [tripId], references: [id])
  description String
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?

  @@index([tripId])
}
